generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model user {
  id             Int            @id @default(autoincrement())
  fname          String
  lname          String
  email          String
  phonenumber    String
  password       String
  active_balance Float
  total_fee      Float
  cpo_holded     Float
  status         UserStatus     @default(PENDING)
  registered_at  DateTime
  Bids           bid[]
  Verifications  verification[]
  Withdrawals    withdrawalRequest[]
  Organizations  organization[]
  Applications   application[]
  Payments       payment[]
  Notifications  notification[]
}

model organization {
  id            Int              @id @default(autoincrement())
  name          String
  type          OrganizationType
  tin_number    String
  location      String
  file_url      String
  status        UserStatus     @default(PENDING)
  user_id       Int
  registered_at DateTime
  User          user             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model bid {
  id           Int           @id @default(autoincrement())
  user_id      Int
  cpo_amount   Float
  created_at   DateTime
  deadline     DateTime
  title        String
  description  String
  fee          Float
  tag          String
  total_fee    Float         @default(0)
  status       BidStatus
  User         user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  BidFiles     bidFiles[]
  Applications application[]
  Payments     payment[]
  Notifications notification[]
}

model bidFiles {
  id       Int    @id @default(autoincrement())
  bid_id   Int
  file_url String
  Bid      bid    @relation(fields: [bid_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model application {
  id         Int                   @id @default(autoincrement())
  file_url   String
  user_id    Int
  bid_id     Int
  created_at DateTime
  status     ApplicationStatusType @default(PENDING)
  User       user                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Bid        bid                   @relation(fields: [bid_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model payment {
  id      Int           @id @default(autoincrement())
  user_id Int
  bid_id  Int?
  amount  Float
  paid_at DateTime
  status  PaymentStatus
  User    user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Bid     bid?          @relation(fields: [bid_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model notification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  bid_id     Int
  message    String
  created_at DateTime
  User       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Bid        bid?     @relation(fields: [bid_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model verification {
  id         Int      @id @default(autoincrement())
  code       String
  user_id    Int
  expires_at DateTime
  User       user     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model admin {
  id          Int      @id @default(autoincrement())
  fname       String
  lname       String
  email       String
  phonenumber String
  password    String
  role        String   @default("ADMIN")
  created_at  DateTime @default(now())
}

model withdrawalRequest {
  id           Int              @id @default(autoincrement())
  user_id      Int
  fname        String
  lname        String
  phonenumber  String
  bank_account String
  bank         Bank
  created_at   DateTime
  status       WithdrawalStatus @default(PENDING)
  amount       Float
  User         user             @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

enum UserStatus {
  ACTIVE
  PENDING
  SUSPENDED
}

enum BidStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum OrganizationType {
  GOVERNMENTAL
  PRIVATE
}

enum ApplicationStatusType {
  ACCEPTED
  REJECTED
  PENDING
}

enum WithdrawalStatus {
  PENDING
  ACCEPTED
}

enum Bank {
  Abay
  Zemen
  Wegagen
  Hibret
  Dashen
  COOP
  CBE
  Abyssinia
  Awash
}